#include<stdio.h>#include<errno.h>#include<wiringPi.h>#include<wiringSerial.h>#include<cstdint>#include<iostream>#include<fstream>#include<string>#include<pthread.h>#include<semaphore.h>#include<math.h>#include"config.h"#include"data.h"#include"serial_headers.h"#include"DataSelector.h"#include"copyBits.h"charpacketBuffer[PACKET_SIZE];booldataUsed=false;sem_tpacketSem;sem_tdataFileSem;SensorMapsensors;voidsaveData(Datadata,char*buf){#ifdefPRINT_DATAdata.printData();#endifstd::ofstreamsensorDataFile;std::stringpath=SENSOR_DATA_PATH;path+=std::to_string(data.getType());sensorDataFile.open(path,std::ios::app|std::ios::binary);if(!sensorDataFile.fail()){sensorDataFile.write(buf,data.getNumBytes());std::cout<<"Savingline:"<<data<<"tofile"<<std::endl;#ifdefPRINT_DATAprintf("Saved%d,%utofile!\n",data.getType(),data.getTimeStamp());#endif}else#ifdefPRINT_DATAprintf("Open:%sfailed!\n",path.c_str());#endifsensorDataFile.close();}boolcheckValid(Datadata){std::vector<int>points=data.getData();for(inti=0;i<data.getNumVals();i++){if(points[i]==NAN){#ifdefVALIDITY_Pprintf("Error%u:Validitycheckfailed!with'%disNAN'!\n",data.getTimeStamp(),i);#endifreturnfalse;}if(data.getType()==TC_ID&&(points[i]<(int)((TC_LOW+TC_OFFSET)*TC_MULT)||points[i]>(int)((TC_MAX+TC_OFFSET)*TC_MULT))){#ifdefVALIDITY_Pprintf("Error%u:TCvaliditycheckfailedwith'%d=%d'!\n",data.getTimeStamp(),i,points[i]);#endifreturnfalse;}if(data.getType()==ACC_ID&&(points[i]<(int)((ACC_LOW+ACC_OFFSET)*ACC_MULT)||points[i]>(int)((ACC_HIGH+ACC_OFFSET)*ACC_MULT))){#ifdefVALIDITY_Pprintf("Error%u:ACCvaliditycheckfailedwith'%d=%d'!\n",data.getTimeStamp(),i,points[i]);#endifreturnfalse;}}returntrue;}void*PackagingThread(void*arguments){DataSelectordataSelector(&sensors);std::vector<DataPoint*>dataList;std::ifstreamsensorFile;uint8_t*buffer;uint8_tnewPacket[PACKET_SIZE];while(true){if(PACKET_DELAY){delay(PACKET_DELAY*1000);}memset(newPacket,'\0',PACKET_SIZE);sem_wait(&packetSem);if(dataUsed){dataSelector.markUsed();dataUsed=false;}sem_wait(&dataFileSem);dataList=*dataSelector.selectData();sem_post(&dataFileSem);if(!dataList.empty()){unsignedintstartingPos=0;for(DataPoint*dataInfo:dataList){#ifdefDEBUG_Pstd::cout<<"listsize:"<<dataList.size()<<std::endl;std::cout<<"sensoridandfileindex:"<<dataInfo->sensor_id<<""<<dataInfo->fileIndex<<std::endl;#endifsem_wait(&dataFileSem);std::stringpath=SENSOR_DATA_PATH;path+=std::to_string(dataInfo->sensor_id);sensorFile.open(path,std::ios_base::binary);if(sensorFile.is_open()){sensorFile.seekg(dataInfo->fileIndex);unsignedintnumBits=sensors.sensorMap[dataInfo->sensor_id]->numBitsPerDataPoint;unsignedintnumBytes=(numBits+7)/8;buffer=(uint8_t*)malloc(numBytes);sensorFile.read((char*)buffer,numBytes);if(!sensorFile)std::cout<<"ERROR:only"<<sensorFile.gcount()<<"bytescouldberead,"<<numBytes<<"expected\n";else{copyBitsB(buffer,0,newPacket,startingPos,numBits);startingPos+=numBits;}sensorFile.close();free(buffer);}else{std::cout<<"ERROR:couldnotopen"<<path<<std::endl;}sem_post(&dataFileSem);}}if(!dataList.empty()){memcpy(packetBuffer,newPacket,PACKET_SIZE);}#ifdefPACKET_P//Printthepacketfordebuggingprintf("Generatedpacket:%s\n",packetBuffer);#endifsem_post(&packetSem);}free(newPacket);returnNULL;}void*IOThread(void*arguments){intfd;if((fd=serialOpen(SERIAL_FEATHER,115200))<0){fprintf(stderr,"Unabletoopenserialdevice:%s\n",strerror(errno));exit(1);}printf("Connectedto%s!\n",SERIAL_FEATHER);if(wiringPiSetup()==-1){fprintf(stdout,"UnabletostartwiringPi:%s\n",strerror(errno));exit(1);}printf("wiringPisetup!\n");printf("Listeningforsensordata!\n");charletter;charline[MAX_CHARS];intpos=0;std::stringcode="";intpacketFileName=0;while(true){letter=(char)serialGetchar(fd);line[pos]=letter;pos++;if(letter=='\n'){intx=0;while(line[x]!=','&&line[x]!='\n'){if(line[x]!='\n'||line[x]!='\r'){code+=line[x];x++;}}#ifdefDEBUG_Pprintf("CODE:%s\n",code.c_str());printf("CODEtoINT:%d\n",stoi(code));#endiftry{if(stoi(code)==PACKET_REQUEST){charlocalBuffer[PACKET_SIZE];memset(localBuffer,'\0',PACKET_SIZE);sem_wait(&packetSem);#ifdefDEBUG_Pprintf("PACKETREQUESTRECEIVED:\n");#endif#ifdefPACKET_Pprintf("Sentpacket:%s\n",packetBuffer);#endifserialPuts(fd,packetBuffer);dataUsed=true;memcpy(localBuffer,packetBuffer,PACKET_SIZE);sem_post(&packetSem);std::ofstreampacketDataFile;std::stringpath=PACKET_DATA_PATH;path+=std::to_string(packetFileName);packetDataFile.open(path,std::ios_base::out|std::ios_base::binary|std::ios_base::trunc);if(packetDataFile.fail()){printf("ERROROPENINGPACKETDATAFILE:%s\n",path.c_str());}else{sem_wait(&packetSem);packetDataFile.write(localBuffer,PACKET_SIZE);#ifdefPACKET_Pprintf("Savedpacket%stofile!\n",packetBuffer);#endifsem_post(&packetSem);packetFileName++;packetDataFile.close();}}else{#ifdefPRINT_DATAprintf("%s\n",line);#endiftry{Datadatum(line,&sensors);intsize=datum.getNumBytes();chartemp_buf[size];memset(&temp_buf,0,size);datum.createBitBuffer(temp_buf);sem_wait(&dataFileSem);if(checkValid(datum))saveData(datum,temp_buf);sem_post(&dataFileSem);}catch(std::stringe){#ifdefDATA_Pprintf("%s\n",e.c_str());#endif}}}catch(conststd::exception&e){#ifdefDEBUG_Pprintf("Invalidcodereceived\n");#endif}pos=0;code="";memset(line,'\0',MAX_CHARS*sizeof(char));}}returnNULL;}intmain(){memset(packetBuffer,'\0',PACKET_SIZE);sensors.addSensor(TC_ID,TC_PRIORITY,TC_NUM_SAMPLES_PER_DATA_POINT,TC_NUM_BITS_PER_SAMPLE,TC_OFFSET,TC_MULT);sensors.addSensor(IMU_ID,IMU_PRIORITY,IMU_NUM_SAMPLES_PER_DATA_POINT,IMU_NUM_BITS_PER_SAMPLE,IMU_OFFSET,IMU_MULT);sensors.addSensor(GPS_ID,GPS_PRIORITY,GPS_NUM_SAMPLES_PER_DATA_POINT,GPS_NUM_BITS_PER_SAMPLE,GPS_OFFSET,GPS_MULT);sensors.addSensor(RMC_ID,RMC_PRIORITY,RMC_NUM_SAMPLES_PER_DATA_POINT,RMC_NUM_BITS_PER_SAMPLE,RMC_OFFSET,RMC_MULT);sensors.addSensor(ACC_ID,ACC_PRIORITY,ACC_NUM_SAMPLES_PER_DATA_POINT,ACC_NUM_BITS_PER_SAMPLE,ACC_OFFSET,ACC_MULT);sensors.addSensor(PRES_ID,PRES_PRIORITY,PRES_NUM_SAMPLES_PER_DATA_POINT,PRES_NUM_BITS_PER_SAMPLE,PRES_OFFSET,PRES_MULT);sensors.addSensor(SPEC_ID,SPEC_PRIORITY,SPEC_NUM_SAMPLES_PER_DATA_POINT,SPEC_NUM_BITS_PER_SAMPLE,SPEC_OFFSET,SPEC_MULT);if(sem_init(&packetSem,0,1)!=0){printf("ERROR:Semaphorefailed\n");}if(sem_init(&dataFileSem,0,1)!=0){printf("ERROR:Semaphorefailed\n");}pthread_tthread1,thread2;pthread_create(&thread1,NULL,IOThread,NULL);pthread_create(&thread2,NULL,PackagingThread,NULL);pthread_exit(0);}